y<-2
y^2+g(x)
}
g<- function(x){
Q
y<- 10
f <- function(x){
y<-2
}
y^2+g(x)
g<- function(x){
g<- function(x){
x*y
}
f(3)
g<- function(x){
x*y
}
y<- 10
f <- function(x){
y<-2
y^2+g(x)
}
f(3)
sigma
rnorm(100,1,2)
?rnorm
#Code standard
Dates and Times
#Dates and Times
#Dates are stored internally as the number of days since 1970-01-01
x <- as.Dat("1970-01-01")
x <- as.Date("1970-01-01")
x
unclass(x)
unclass(as.Date("1970-01-02"))
unclass(as.Date("1970-01-02")
unclass(as.Date("1970-01-02"))
unclass(as.Date("1970-01-02"))
unclass(as.Date("1970-01-02")) #1
quarters("1970-01-01")
x <- Sys.time()
x
p <- as.POSIXlt(x)
names(uncalss(p))
names(unclass(p))
p$sec
names(class(p))
uncalss(x)
unclass(x)
p <-as.POSIXlt(x)
p$sec
#strptime function in case your dates are written in a different format
detestring <- c("January 10, 2012 10:40","December 9, 2011 9:10")
datestring <- c("January 10, 2012 10:40","December 9, 2011 9:10")
x<- strptime(datesrting, "%B %d, %Y %H:%M")
x<- strptime(datestring, "%B %d, %Y %H:%M")
x
class(x)
x <- as.Date("2012-01-01")
y <- strptime("9 Jan 2011 11:34:21", "%d %b %Y %H:%M:%S")
x-y
x <as.POSIXlt(x)
x-y
x <-as.POSIXlt(x)
x-y
#Quiz 2
#Quiz 2
#Quiz 2
x <- 1:10
x <- 1:10
if(x>5){
x <- 0
}
#Q3
f <- function(x){
g <- function(y){
y+z
}
z <- 4
x+g(x)
}
z <- 10
f(3)
#q4
x <- 5
x <- 5
y <- if(x<3){
NA
}else{
10
}
y
#q5
##Week 3
#lapply: Loop over a list and evaluate a function on each element
#sapply: Same as lapply but try to simplify the result
#apply: Apply a function over the margins of an array
#mapply: Multivariate version of lapply
x <- list(a=1:5,b=rnorm(10))
lapply(x,mean)
#lapply always returns a list
x <- 1:4
lapply(x,runif)
lapply(x,runif,min=0,max=10)
lapply(x,runif,min=0,max=10) #still returns a list
#lapply make friends with many anonymous functons
#sapply
#if the result is a list where every element is length 1, then a vctor is returned
#the same length>1, returns a matrix
#apply
often use to rows and columns of a matrix
#often use to rows and columns of a matrix
x <- matrix(rnorm(200),20,10)
apply(x,2,mean)
apply(x,1,sum)
#column:2; row:1;
apply(x,1,quantile,probs=c(0.25,0.75))
apply(x,1,quantile,probs=c(0.25,0.75)) #returns a matrix
apply(x,1,quantile,probs=c(0.25,0.75)) #returns a 2*20 matrix
a <- array(rnorm(2*2*10), c(2,2,10))
apply(a,c(1,2),mean)
rowMeans(a,dims=2)
#Mapply
#mapply #suppose 2 lists
#mapply e.g.suppose 2 lists
list(rep(1,4), rep(2,3), rep(3,2), rep(4,1))
mapplu(rep,1:4,4:1)
list(rep(1,4), rep(2,3), rep(3,2), rep(4,1))
mapply(rep,1:4,4:1)
mapply(rep,1:4,4:1) #same result with above
noise(5,1,2)
noise <- function(n,mean,sd){
rnorm(n,mean,sd)
}
noise(5,1,2)
noise(1:5,1:5,2)
mapply(noise,1:5,1<5,2)
mapply(noise,1:5,1:5,2)
mapply(noise,1:5,1:5,2) #get 1 with mean 1,2 with mean 2,...
list(noise(1,1,2), noise(2,2,2), noise(3,3,2), noise(4,4,2), noise(5,5,2))
list(noise(1,1,2), noise(2,2,2), noise(3,3,2), noise(4,4,2), noise(5,5,2)) #same result with above
#tapply
#used to apply a function over subsets of a vector
x <- c(rnorm(10), runif(10), rnorm(10,1))
x <- c(rnorm(10), runif(10), rnorm(10,1))x
x <- c(rnorm(10), runif(10), rnorm(10,1))
x
f <- gl(3,10)
f
f <- gl(3,10) #create a factor variable f with 3 levels:1,2,3 each for 10
tapply(x,f,mean)
tapply(x,f,mean,simplify = F)
tapply(x,f,mean,simplify = F) #return a list
tapply(x,f,range)
#split
#identical with tapply whtiout the statistics
split(x,f)
split(x,f,simplify=T)
#always return a list
lapply(split(x,f),mean)
library(datasets)
head(airquality)
tapply(airquality,Month,mean)
tapply(airquality,airquality$Month,mean)
tapply(airquality,airquality$Month,mean) #doesn't work
s <- split(airquality, airquality$Month)
lapply(s,function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")]))
lapply(s,colMeans(x[,c("Ozone", "Solar.R", "Wind")]))
sapply(s,function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")]))
sapply(s,function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")]), na.rm=T)
sapply(s,function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm=T)
sapply(s,function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm=T)
sapply(s,function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm=T)
sapply(s,function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm=T))
sapply(s,function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm=TRUE))
sapply(s,function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm=T))
sapply(s,function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm=TRUE))
sapply(s,function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm=TRUE))
sapply(s,function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm=TRUE))
#splitting on more than one level
x <- rnorm(10)
f1<- gl(2,5)
f2 <- gl(5,2)
f1
f2
interaction(f1,f2)
interaction(f1,f2) #combinations of 2 levels
str(split(x,list(f1,f2)))
split(x,list(f1,f2))
x
split(x,list(f1,f2),drop=TRUE)
str(split(x,list(f1,f2),drop=TRUE))
#Debugging
log(-1)
log(-1) #produce a warning
#all print function returns the object it prints
#Debugging tools in R
#traceback
#debug
#debug flag the funciton for "debug" mode
#brower
#brower suspends the execution of a finction
#trace
#recover
##Quiz 3
library(datasets)
data(iris)
head(iris)
s <- split(iris,iris$Species)
sapply(s,function(x) colMeans(x[,"Sepal.Length")], na.rm=TRUE))
sapply(s,function(x) colMeans(x[,"Sepal.Length"], na.rm=TRUE))
s <- split(airquality, airquality$Month)
s <- split(airquality, airquality$Month)
sapply(s,function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm=TRUE))
sapply(s,function(x) mean(x[,"Sepal.Length"], na.rm=TRUE))
sapply(s,(mean[,"Sepal.Length"], na.rm=TRUE))
sapply(s,(mean[,"Sepal.Length"], na.rm=TRUE))
sapply(s,(mean["Sepal.Length",], na.rm=TRUE))
sapply(s,mean[,"Sepal.Length"])
mean[,"Sepal.Length"]
summary(mean(iris$Sepal.Length))
summary(mean(s$Sepal.Length))
head(s)
s <- split(iris,iris$Species)
summary(mean(s$Sepal.Length))
head(s)
lapply(s,mean)
head(s)
mean(s$virginica$Sepal.Length)
#a2
#q2
colMeans(iris)
apply(iris,2,mean)
apply(iris[,1:4],1,mena)
apply(iris[,1:4],1,mean)
rowMeans(iris[,1:4])
apply(iris[,1:4],2,mean)
apply(iris,2,mean)
apply(iris[,1:6],2,mean)
apply(iris[,1:4],2,mean)
apply(iris[,1:6],2,mean)
apply(iris[,1:5],2,mean)
apply(iris[,1:3],2,mean)
head(iris)
apply(iris,2,mean)
#q3
library(datasets)
data(mtcars)
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(iris$Sepal.Length, iris$Species="virginica"),mean)
sapply(split(iris$Sepal.Length, iris$Species=="virginica"),mean)
sapply(split(iris$Sepal.Length, iris$Species),mean)
sapply(subset(iris$Sepal.Length, iris$Species=="virginica"),mean)
#orsapply(subset(iris$Sepal.Length, iris$Species),mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
tappluy(mtcars$mpg,mtcars$cyl,mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
head(mtcars)
with(mtcars,tapply(hp,cyl,mean)
with(mtcars,tapply(hp,cyl,mean))
x <- with(mtcars,tapply(hp,cyl,mean))
x[3]-x[1]
#q5
debug(ls)
ls()
sapply(subset(iris$Sepal.Length, iris$Species),mean)
print("Hi")
undebug(ls)
debugonce(ls)
debugonce()
undebug()
mean(mtcars$mpg, mtcars$cyl)
sapply(subset(iris$Sepal.Length, iris$Species),mean)
library(datasets)
data(iris)
sapply(subset(iris$Sepal.Length, iris$Species),mean)
sapply(split(iris$Sepal.Length, iris$Species),mean)
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(mtcars, cyl, mean)
apply(mtcars, 2, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
head(mtcars)
x <- with(mtcars,tapply(hp,cyl,mean))
x[3]-x[1]
#Chengdong Liang
#Jul 29,2016
#Chengdong Liang
##Programming Assignment 2:Lexical Scoping
#Chengdong Liang
#Jul 29,2016
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
f <- function(x) x^2
f(3)
f <- function() x^2
f(3)
function() x
function() x
get <- function() x
get <- function() x
get(3)
fet
get
makeVector(1:4)
makeVector(3)
makeVector(3.14,8.88)
makeVector(c(3.14,8.88)
)
makeVector(c(3.14,8.88))
function()x
function()x
makeVector(c(3.14,8.88))
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
y <<- x
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(c(3.14,8.88))
##Programming assignment 1: Air Pollution
getwd()
setwd("/Users/chengdong/Desktop/Coursera_R Programming")
getwd()
#Part 1
files_full <- list.files(directory, full.names= TRUE)
?list.files
Pollutantmean <- function(directory, pollutant, id= 1:332){
files_full <- list.files(directory, full.names= TRUE)
dat <- data.frame()
for (i in id){
dat <- rbind(dat, read.csv(files_full[i]))
}
mean(dat[,pollutant], na.rm=TRUE)
}
files_full<- list.files("/Users/chengdong/Desktop/Coursera_R Programming/specdata")
files.full
files_full
files_full<- list.files("/Users/chengdong/Desktop/Coursera_R Programming/specdata",full.names=TRUE)
files_full
files_full[3]
read.csv(files_full[3])
head(read.csv(files_full[3]))
dat <- data.frame()
dat
class(read.csv(files_full[3])
)
mean(read.csv(files_full[3])[,sulfate], na.rm=TRUE)
mean(read.csv(files_full[3])[,"sulfate"], na.rm=TRUE)
Pollutantmean <- function(directory, pollutant, id= 1:332){
files_full <- list.files(directory, full.names= TRUE)
mean(read.csv(files_full[3])[,pollutant], na.rm=TRUE)
}
Pollutantmean("specdata", "sulfate", 23)
list.files("specdata", full.names= TRUE)
mean(read.csv(files_full[3])[,"nitrate"], na.rm=TRUE)
mean(read.csv(files_full[3])[,"nitrate"], na.rm=TRUE)
mean(read.csv(files_full[23])[,"nitrate"], na.rm=TRUE)
Pollutantmean("specdata", "sulfate", 1:23)
Pollutantmean("specdata", "sulfate", 1:10)
Pollutantmean <- function(directory, pollutant, id= 1:332){
files_full <- list.files(directory, full.names= TRUE)
selectData <- data.frame()
for (i in id){
selectData <- rbind(selectData,read.csv(files_full[i]))
mean(selectData[,pollutant], na.rm=TRUE)
}
pollutantmean("specdata", "sulfate", 1:10)
Pollutantmean <- function(directory, pollutant, id= 1:332){
files_full <- list.files(directory, full.names= TRUE)
selectData <- data.frame()
for (i in id){
selectData <- rbind(selectData,read.csv(files_full[i]))
}
mean(selectData[,pollutant], na.rm=TRUE)
}
pollutantmean("specdata", "sulfate", 1:10)
Pollutantmean <- function(directory, pollutant, id= 1:332){
files_full <- list.files(directory, full.names= TRUE)
selectData <- data.frame()
for (i in id){
selectData <- rbind(selectData,read.csv(files_full[i]))
}
mean(selectData[,pollutant], na.rm=TRUE)
}
Pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
#Part 2
?complete.cases
complete <- function(directory, id = 1:332) {
files_full <- list.files(directory, full.names = TRUE)
selectData <- data.frame()
for (i in id) {
moni_i <- read.csv(files_full[i])
nobs <- sum(complete.cases(moni_i))
tmp <- data.frame(i, nobs)
selectData <- rbind(selectData, tmp)
}
colnames(selectData) <- c("id", "nobs")
selectData
}
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
#Part 3
?vector
length(list.files(("specdata",full.names=TRUE)))
length(list.files("specdata",full.names=TRUE))
corr <- function(directory, threshold = 0) {
files_full <- list.files(directory, full.names = TRUE)
dat <- vector(mode = "numeric", length = 0)
for (i in 1:length(files_full)) {
moni_i <- read.csv(files_full[i])
csum <- sum((!is.na(moni_i$sulfate)) & (!is.na(moni_i$nitrate)))
if (csum > threshold) {
tmp <- moni_i[which(!is.na(moni_i$sulfate)), ]
submoni_i <- tmp[which(!is.na(tmp$nitrate)), ]
dat <- c(dat, cor(submoni_i$sulfate, submoni_i$nitrate))
}
}
dat
}
cr <- corr("specdata", 150)
head(cr)
length(list.files("specdata",full.names=TRUE))
cr <- corr("specdata", 400)
head(cr)
summary(cr)
length(cr)
#q1
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant, id= 1:332){
files_full <- list.files(directory, full.names= TRUE)
selectData <- data.frame()
for (i in id){
selectData <- rbind(selectData,read.csv(files_full[i]))
}
mean(selectData[,pollutant], na.rm=TRUE)
}
pollutantmean("specdata", "sulfate", 1:10)
3q2
#q2
pollutantmean("specdata", "nitrate", 70:72)
#q3
pollutantmean("specdata", "sulfate", 34)
#q4pollutantmean("specdata", "nitrate")
pollutantmean("specdata", "nitrate")
#q5
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
#q6
cc <- complete("specdata", 54)
print(cc$nobs)
#q7
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
#q8
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
#q9
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
#q10
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
